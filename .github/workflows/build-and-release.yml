name: Build and Release Qwen-AI-Assistant

on:
  push:
    tags:
      - 'v*'  # Triggers on version tags like v1.0.0, v2.1.3, etc.
  workflow_dispatch:  # Allows manual triggering from Actions tab

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            executable_name: Qwen-AI-Assistant.exe
            build_name: windows
          - os: ubuntu-latest
            executable_name: Qwen-AI-Assistant
            build_name: linux
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install -r requirements.txt
    
    - name: Build executable (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        pyinstaller --onefile --console qwen_assistant.py --name Qwen-AI-Assistant
    
    - name: Build executable (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        pyinstaller --onefile --console qwen_assistant.py --name Qwen-AI-Assistant
    
    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.build_name }}-executable
        path: |
          dist/${{ matrix.executable_name }}

  release:
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Get tag name
      id: tag
      run: echo "TAG_NAME=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
    
    - name: Download all artifacts
      uses: actions/download-artifact@v3
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.TAG_NAME }}
        release_name: Qwen-AI-Assistant ${{ steps.tag.outputs.TAG_NAME }}
        draft: false
        prerelease: false
        body: |
          # Qwen-AI-Assistant ${{ steps.tag.outputs.TAG_NAME }}
          
          ## Download Options
          - **Windows**: Download `Qwen-AI-Assistant-windows.exe` 
          - **Linux**: Download `Qwen-AI-Assistant-linux` (make executable with `chmod +x`)
          - **Linux (Source)**: Use the existing `install_linux.sh` script
          
          ## Changes
          - Built from commit ${{ github.sha }}
          - Cross-platform executables built with PyInstaller
          
          ## Usage
          ### Windows
          Simply run `Qwen-AI-Assistant-windows.exe`
          
          ### Linux
          ```bash
          chmod +x Qwen-AI-Assistant-linux
          ./Qwen-AI-Assistant-linux
          ```
    
    - name: Upload Windows Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./windows-executable/Qwen-AI-Assistant.exe
        asset_name: Qwen-AI-Assistant-windows.exe
        asset_content_type: application/octet-stream
    
    - name: Upload Linux Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./linux-executable/Qwen-AI-Assistant
        asset_name: Qwen-AI-Assistant-linux
        asset_content_type: application/octet-stream
